#ifndef ZRGL_BATCH_DRAW_SHADERS_H
#define ZRGL_BATCH_DRAW_SHADERS_H

//////////////////////////////////////////////////
// draw_sprite_batch_3_vert.glsl
//////////////////////////////////////////////////
static const char* draw_sprite_batch_3_vert_text =
"#version 330\n"
"\n"
"#define DEG2RAD 0.0174532925\n"
"\n"
"uniform mat4 u_projection;\n"
"uniform mat4 u_view;\n"
"// uniform int u_instanceCount;\n"
"uniform sampler2D u_dataTexture;\n"
"uniform int u_dataStride;\n"
"uniform int u_dataTexSize;\n"
"uniform int u_isBillboard;\n"
"\n"
"layout (location = 0) in vec3 i_position;\n"
"layout (location = 1) in vec2 i_uv;\n"
"layout (location = 2) in vec3 i_normal;\n"
"\n"
"out vec2 m_texCoord;\n"
"out vec3 m_normal;\n"
"out vec3 m_fragPos;\n"
"// flat - no interpolation\n"
"flat out int m_instanceID;\n"
"flat out vec4 m_colour;\n"
"\n"
"ivec2 DataIndexToPixel(int index, int imageWidth)\n"
"{\n"
"	return ivec2(index % imageWidth, int(index / imageWidth));\n"
"}\n"
"\n"
"vec4 ReadDataPixel(int dataItemNumber)\n"
"{\n"
"    int root = u_dataStride * m_instanceID;\n"
"    ivec2 pixel = DataIndexToPixel(root + dataItemNumber, u_dataTexSize);\n"
"    return texelFetch(u_dataTexture, pixel, 0);\n"
"}\n"
"\n"
"mat4 CreateScaleM4x4(float x, float y, float z)\n"
"{\n"
"    mat4 m;\n"
"    m[0][0] = x; // scale x\n"
"    m[0][1] = 0;\n"
"    m[0][2] = 0;\n"
"    m[0][3] = 0;\n"
"\n"
"    m[1][0] = 0;\n"
"    m[1][1] = y; // scale y\n"
"    m[1][3] = 0;\n"
"    m[1][2] = 0;\n"
"\n"
"    m[2][0] = 0;\n"
"    m[2][1] = 0;\n"
"    m[2][2] = z; // scale z\n"
"    m[2][3] = 0;\n"
"    \n"
"    m[3][0] = 0;            // pos x\n"
"    m[3][1] = 0;            // pos y\n"
"    m[3][2] = 0;            // pos z\n"
"    m[3][3] = 1;            // pos w\n"
"    return m;\n"
"}\n"
"\n"
"mat4 CreateRotateM4x4(float radians)\n"
"{\n"
"    mat4 rot;\n"
"    rot[0][0] = cos(radians);\n"
"    rot[0][1] = sin(radians);\n"
"    rot[0][2] = 0;\n"
"    rot[0][3] = 0;\n"
"\n"
"    rot[1][0] = -sin(radians);\n"
"    rot[1][1] = cos(radians);\n"
"    rot[1][2] = 0;\n"
"    rot[1][3] = 0;\n"
"\n"
"    rot[2][0] = 0;\n"
"    rot[2][1] = 0;\n"
"    rot[2][2] = 1;\n"
"    rot[2][3] = 0;\n"
"\n"
"    rot[3][0] = 0;\n"
"    rot[3][1] = 0;\n"
"    rot[3][2] = 0;\n"
"    rot[3][3] = 1;\n"
"    return rot;\n"
"}\n"
"\n"
"vec3 RotateSpritVertex(vec3 pos, float radians)\n"
"{\n"
"    mat3 rot;\n"
"    rot[0][0] = cos(radians);\n"
"    rot[0][1] = sin(radians);\n"
"    rot[0][2] = 0;\n"
"\n"
"    rot[1][0] = -sin(radians);\n"
"    rot[1][1] = cos(radians);\n"
"    rot[1][2] = 0;\n"
"\n"
"    rot[2][0] = 0;\n"
"    rot[2][1] = 0;\n"
"    rot[2][2] = 1;\n"
"    return pos * rot;\n"
"}\n"
"\n"
"void main()\n"
"{\n"
"    // pass instance to frag shader\n"
"    m_instanceID = gl_InstanceID;\n"
"\n"
"    // read instance data\n"
"    vec4 posAndRot = ReadDataPixel(0);\n"
"    vec4 uvs = ReadDataPixel(1);\n"
"    vec4 scalePixel = ReadDataPixel(2);\n"
"    vec4 colourPixel = ReadDataPixel(3);\n"
"    \n"
"    mat4 u_model;\n"
"    m_colour = colourPixel;\n"

"    \n"
"    vec4 positionV4 = vec4(i_position, 1.0);\n"
"    // apply scale then rotate in model space\n"
"    mat4 scale = CreateScaleM4x4(scalePixel.x, scalePixel.y, 1);\n"
"    mat4 rot = CreateRotateM4x4(posAndRot.w);\n"
"    positionV4 *= scale;\n"
"    positionV4 *= rot;\n"
"\n"
"    u_model[0][0] = 1; // scale x\n"
"    u_model[0][1] = 0;\n"
"    u_model[0][2] = 0;\n"
"    u_model[0][3] = 0;\n"
"\n"
"    u_model[1][0] = 0;\n"
"    u_model[1][1] = 1; // scale y\n"
"    u_model[1][3] = 0;\n"
"    u_model[1][2] = 0;\n"
"\n"
"    u_model[2][0] = 0;\n"
"    u_model[2][1] = 0;\n"
"    u_model[2][2] = 1; // scale z\n"
"    u_model[2][3] = 0;\n"
"    \n"
"    u_model[3][0] = posAndRot.x;    // pos x\n"
"    u_model[3][1] = posAndRot.y;    // pos y\n"
"    u_model[3][2] = posAndRot.z;    // pos z\n"
"    u_model[3][3] = 1;          // pos w\n"
"    \n"
"    mat4 u_modelView = u_view * u_model;\n"
"    \n"
"    // vec4 positionV4 = vec4(RotateSpritVertex(i_position, 45 * DEG2RAD), 1.0);\n"
"    // vec4 positionV4 = vec4(i_position, 1.0);\n"
"    if (u_isBillboard == 0)\n"
"    {\n"
"        // regular 3d\n"
"        gl_Position = u_projection * u_modelView * positionV4;\n"
"    }\n"
"    else\n"
"    {\n"
"        // reset rotation\n"
"        vec3 scale;\n"
"		mat4 mv = u_modelView;\n"
"		scale.x = length(mv[0].xyz);\n"
"		scale.y = length(mv[1].xyz);\n"
"		scale.z = length(mv[2].xyz);\n"
"		mv[0].xyz = vec3(1, 0, 0) * scale.x;\n"
"		mv[1].xyz = vec3(0, 1, 0) * scale.y;\n"
"		mv[2].xyz = vec3(0, 0, 1) * scale.z;\n"
"		gl_Position = u_projection * mv * positionV4;\n"
"    }\n"
"    \n"
"    m_texCoord.x = uvs.x + ((uvs.z - uvs.x) * i_uv.x);\n"
"    m_texCoord.y = uvs.y + ((uvs.w - uvs.y) * i_uv.y);\n"
"	m_normal = normalize(mat3(u_modelView) * i_normal);\n"
"	m_fragPos = vec3(u_modelView * positionV4);\n"
"}\n"
"\n"
;
//////////////////////////////////////////////////
// draw_sprite_batch_frag.glsl
//////////////////////////////////////////////////
static const char* draw_sprite_batch_frag_text =
"#version 330\n"
"\n"
"uniform sampler2D u_diffuseTex;\n"
"uniform sampler2D u_dataTexture;\n"
"uniform int u_instanceCount;\n"
"\n"
"in vec2 m_texCoord;\n"
"in vec3 m_normal;\n"
"in vec3 m_fragPos;\n"
"\n"
"// flat - no interpolation\n"
"flat in int m_instanceID;\n"
"flat in vec4 m_colour;\n"
"\n"
"out vec4 outputColor;\n"
"\n"
"void main()\n"
"{\n"
"    #if 1\n"
"    vec4 diffuse = texture2D(u_diffuseTex, m_texCoord);\n"
"    if (diffuse.w < 0.2 || m_colour.w < 0.2) { discard; }\n"
"    outputColor = diffuse * m_colour;\n"
"    #endif\n"
"\n"
"    #if 0\n"
"    vec4 diffuse = texture2D(u_diffuseTex, m_texCoord);\n"
"    float r = float(m_instanceID) / float(u_instanceCount);\n"
"    float g = 1.0 - float(m_instanceID) / float(u_instanceCount);\n"
"    outputColor = vec4(diffuse.x * r, diffuse.y * g, diffuse.b, 1);\n"
"    #endif\n"
"    \n"
"    #if 0\n"
"    // vec4 block = vec4(1, 1, 1, 1);\n"
"    // vec4 posAndRot = texelFetch(u_dataTexture, ivec2(m_instanceID, 0);\n"
"\n"
"    // vec4 diffuse = vec4(texelFetch(u_dataTexture, ivec2(m_instanceID, 0), 0));\n"
"    // vec4 diffuse = vec4(texelFetch(u_dataTexture, ivec2(0, 0), 0));\n"
"    // outputColor = (block * 0.5) + (m_colour * 0.5);\n"
"    outputColor = m_colour;\n"
"    #endif\n"
"}\n"
"\n"
;

#endif // ZRGL_BATCH_DRAW_SHADERS_H
